<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel><title>Ho</title><description>Slow &amp; Steady ✨</description><link>http://localhost:4000/</link><atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/><pubDate>Sat, 26 Feb 2022 16:00:32 +0900</pubDate> <lastBuildDate>Sat, 26 Feb 2022 16:00:32 +0900</lastBuildDate> <generator>Jekyll v4.2.1</generator> <item><title>[Git] Git (2)</title><description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt; &lt;p&gt;자주 사용하는 기본적인 명령어들을 정리해봤다.&lt;/p&gt; &lt;h2 id=&quot;git-기본명령어&quot;&gt;Git 기본명령어&lt;/h2&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Git 저장소 생성해줘 ! ( Git 초기화 과정 )&lt;/p&gt; &lt;p&gt;( 터미널 혹은 cmd로 해당 폴더로 이동 후 위 명령어를 입력하면, 해당 폴더에서 버전관리를 할 수 있다. )&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global user.email “yourEmail” git config --global user.name “yourName”&lt;/code&gt;&lt;/p&gt; &lt;p&gt;ex) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global[user.email](http://user.email)“Ho@gmail.com”&lt;/code&gt;,&lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global [user.name](http://user.name) “Ho”&lt;/code&gt;&lt;/p&gt; &lt;p&gt;위 두 명령어는 버전관리시스템에서 보여질 내 이메일과 이름을 설정한다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status&lt;/code&gt; &lt;ul&gt; &lt;li&gt;Git working tree의 상태를 보여줘 !&lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git status -s&lt;/code&gt; ⇒&lt;/p&gt; &lt;p&gt;working tree의 상태를 짧게 요약해서 보여줘 ! ( 변경된 상태가 많을 때 유용 )&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git add&lt;/code&gt; &lt;ul&gt; &lt;li&gt;이 커밋을 스테이지에 올려줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; &lt;ul&gt; &lt;li&gt;스테이지에 있는 파일들을 커밋해줘 !&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -a&lt;/code&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;add 명령 생략하고 바로 커밋할게 !&lt;/p&gt; &lt;p&gt;( 변경된 파일과 삭제된 파일은 자동으로 스테이징되고 커밋된다. )&lt;/p&gt; &lt;p&gt;( Untracked 파일은 커밋되지 않는다. )&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit -m “commit message”&lt;/code&gt; &lt;ul&gt; &lt;li&gt;커밋메세지는 이렇게 할테니까 커밋해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지금까지 만든 커밋 이력을 보여줘! ( 오름차순으로 가장 최근 내역 )&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log&lt;/code&gt; 명령어 옵션 &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log -p -5&lt;/code&gt; ⇒&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p&lt;/code&gt; 옵션은 각 커밋의 차이점 결과를 보여주고,&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-[숫자]&lt;/code&gt; 옵션은 최근 몇개의 이력을 보여줄 것인지 지정하는 것.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --stat&lt;/code&gt; ⇒&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--stat&lt;/code&gt; 옵션은 각 커밋의 수정내역과 요약정보 등, 대략적인 통계정보를 볼 수 있다.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --pretty&lt;/code&gt; ⇒&lt;/p&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pretty&lt;/code&gt; 옵션은 다양한 형식으로 커밋메세지를 볼 수 있는데, 부가옵션을 추가할 수 있다.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --pretty=oneline&lt;/code&gt; ⇒&lt;/p&gt; &lt;p&gt;oneline 옵션은 커밋을 한줄로 표현해주며, short, full, fuller 옵션은 각 단계에 따라 정보들을 추가적으로 보여준다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --graph&lt;/code&gt; ⇒&lt;/p&gt; &lt;p&gt;커밋 기록을 그래프 형식으로 보여줘 !&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --oneline&lt;/code&gt; ⇒&lt;/p&gt; &lt;p&gt;커밋 해시와 제목만 보여줘 !&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --online --graph --decorate&lt;/code&gt; ⇒&lt;/p&gt; &lt;p&gt;HEAD와 관련된 커밋들을 좀 더 자세히 보여줘 !&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --oneline --graph --all --decorate&lt;/code&gt; ⇒&lt;/p&gt; &lt;p&gt;모든 브랜치의 이력을 보여줘 !&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git log --oneline -5&lt;/code&gt; ⇒&lt;/p&gt; &lt;p&gt;내 브랜치의 최신 커밋 5개만 보여줘 !&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout [commitId]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;내가 지정한 커밋 위치로 이동해줘 ! ( commitId = commitId 앞 7자리만으로도 가능 )&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -&lt;/code&gt; ⇒&lt;/p&gt; &lt;ul&gt; &lt;li&gt;최근 커밋 위치로 이동해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote add [원격저장소 이름] [원격저장소 주소]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;로컬저장소야! 내 원격저장소 주소를 알려줄게 ! ( 로컬저장소와 원격저장소 연동개념 )&lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git remote -v&lt;/code&gt;&lt;/p&gt; &lt;p&gt;원격저장소 목록을 조회한다.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone [원격저장소 주소] [새로운 폴더명]&lt;/code&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;저장소 주소에서 프로젝트를 복제해서 가져와줘 !&lt;/p&gt; &lt;p&gt;( 저장소 주소는 꼭 원격일 필요가 없으며, 로컬저장소도 git clone&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push [-u] [원격저장소 이름] [브랜치 이름]&lt;/code&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;현재 브랜치에서 새로 생성한 커밋들을 원격저장소에 올려줘 !&lt;/p&gt; &lt;p&gt;( -u 옵션으로 브랜치의 업스트림을 등록할 수 있다. )&lt;/p&gt; &lt;p&gt;( 한 번 등록한 후에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; 만 입력해도 된다. )&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;ex) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push -u origin master&lt;/code&gt;&lt;/p&gt; &lt;p&gt;커밋한 내용을 원격저장소의 master branch에 올려줘 !&lt;/p&gt; &lt;p&gt;( 여기서 origin은 원격저장소를 의미하며, master는 해당 원격저장소의 branch를 의미 )&lt;/p&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch [원격저장소 이름] [브랜치 이름]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;원격저장소의 브랜치와 커밋들을 로컬저장소와 동기화한다.&lt;/li&gt; &lt;li&gt;옵션을 생략하면 모든 원격저장소에서 모든 브랜치를 가져온다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge [브랜치 이름]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 브랜치의 커밋들을 현재 브랜치 및 워킹트리에 반영한다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;원격저장소에 새로운 커밋이 있으면, 내 로컬저장소로 가져와줘 !&lt;/p&gt; &lt;p&gt;( &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; + &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 와 동일한 결과이다. )&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone [원격저장소 주소]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;원격저장소의 커밋을 로컬저장소로 옮겨줘 !&lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt; &lt;p&gt;git clone 명령어 뒤에 원격저장소 주소를 적고 한 칸 띄고 마침표를 찍어야 현재 폴더에 저장된다.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;( GitHub에 Download Zip 으로도 소스를 받을 수 있지만, 원격저장소와 버전 정보가 제외되므로, 원격저장소에 있는 소스코드로 작업을 이어서 할 목적이면 clone하는게 간편하다. )&lt;/p&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset [파일명]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;스테이지 영역에 있는 파일들을 스테이지에서 내려줘 ! ( Unstaging )&lt;/li&gt; &lt;li&gt;워킹트리의 내용은 변경되지 않으며, 옵션을 생략할 경우 스테이지의 모든 변경사항을 초기화한다. &lt;br /&gt;&lt;br /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;branch-관련-명령어&quot;&gt;branch 관련 명령어&lt;/h2&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;### 💡 &amp;lt;HEAD에 대해 반드시 기억할 점&amp;gt; ### 1. HEAD는 현재 작업 중인 브랜치를 가리킨다. 2. 브랜치는 커밋을 가리키므로 HEAD도 커밋을 가리킨다. 3. 결국 HEAD는 현재 작업 중인 브랜치의 최근 커밋을 가리킨다. &amp;lt;br&amp;gt; ### 💡 &amp;lt;HEAD~, HEAD^&amp;gt; ### 1. HEAD~[숫자] ⇒ HEAD~은 HEAD의 부모 커밋, HEAD~2는 헤드의 할아버지 커밋을 말한다. HEAD~n은 n번째 위쪽 조상이라는 뜻이다. 2. HEAD^[숫자] ⇒ HEAD^은 똑같이 부모 커밋이다. 반면 HEAD^2는 두 번째 부모를 가리킨다. 병합 커밋처럼 부모가 둘 이상인 커밋에서만 의미가 있다. &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch [-v]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;로컬 저장소의 브랜치 목록을 보여줘 ! &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; 옵션을 사용하면 마지막 커밋도 함께 보여준다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch [브랜치 이름]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 이름으로 브랜치 만들어줘 !&lt;/li&gt; &lt;li&gt;추가 예시 ) &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b feature1&lt;/code&gt; &lt;ul&gt; &lt;li&gt;⇒ feature1 브랜치 생성 및 체크아웃&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b hotfix master&lt;/code&gt; &lt;ul&gt; &lt;li&gt;⇒ master 브랜치로부터 hotfix 브랜치 생성 및 체크아웃&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch [-f] [브랜치 이름] [커밋체크섬]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;새로운 브랜치를 만들어줘 ! &lt;ul&gt; &lt;li&gt;커밋 체크섬 값을 주지 않으면 HEAD로부터 브랜치를 생성한다.&lt;/li&gt; &lt;li&gt;이미 있는 브랜치를 다른 커밋으로 옮기고 싶을 때는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt; 옵션을 줘야 한다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -r[v]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;원격저장소에 있는 브랜치를 보여줘 ! &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; 옵션을 추가해서 커밋 요약도 볼 수 있다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout [브랜치 이름]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;특정 브랜치로 체크아웃해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b [브랜치 이름] [커밋체크섬]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;특정 커밋에서 브랜치만들고 체크아웃까지 해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git merge [대상 브랜치]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;현재 브랜치와 대상 브랜치를 병합해줘 ! &lt;ul&gt; &lt;li&gt;병합 커밋 (merge commit) 이 새로 생기는 경우가 많다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase [대상 브랜치]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;내 브랜치의 커밋들을 대상 브랜치에 재배치 해줘 ! &lt;ul&gt; &lt;li&gt;재배치 대상 커밋이 여러개일 경우, 여러번 충돌이 발생할 수 있다.&lt;/li&gt; &lt;li&gt;기존의 커밋을 하나씩 단계별로 수정한다. 충돌이 없어질 때까지 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase --continue&lt;/code&gt; 명령을 매번 입력해줘야 한다.&lt;/li&gt; &lt;li&gt;충돌이 발생하기 전 상태로 돌리고 싶을 때는, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git rebase --abort&lt;/code&gt; 로 돌릴 수 있다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;blockquote&gt; &lt;p&gt;💡 &lt;rebase 주의사항=&quot;&quot;&gt;&lt;br /&gt; 1. 원격 저장소에 push한 브랜치는 rebase하지 않는 것이 원칙이다.&lt;/rebase&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -d [브랜치 이름]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;특정 브랜치를 삭제해줘 ! &lt;ul&gt; &lt;li&gt;HEAD 브랜치나 병합이 되지 않은 브랜치는 삭제할 수 없다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -D [브랜치 이름]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 브랜치 강제로 삭제해줘 ! &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt; 옵션으로 삭제할 수 없는 브랜치를 지우고 싶을 때 사용한다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --hard [이동할 커밋체크섬]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;현재 브랜치를 지정한 커밋으로 옮긴다. (작업 폴더의 내용도 함께 변경된다.) &lt;br /&gt; &lt;br /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;배포-버전에-태깅하기&quot;&gt;배포 버전에 태깅하기&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git tag -a -m [간단한 메세지] [태그 이름] [브랜치 or 커밋체크섬]&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-a&lt;/code&gt; 로 주석 있는(annotated) 태그를 생성해줘 ! &lt;ul&gt; &lt;li&gt;메세지와 태그 이름은 필수, 브랜치 이름을 생략하면 HEAD에 태그를 생성한다.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push [원격저장소 별명] [태그 이름]&lt;/code&gt; &lt;ul&gt; &lt;li&gt;원격 저장소에 태그를 업로드 해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; </description><pubDate>Sat, 26 Feb 2022 15:59:57 +0900</pubDate><link>http://localhost:4000/posts/git-git-command/</link><guid isPermaLink="true">http://localhost:4000/posts/git-git-command/</guid> <category>git</category> <category>sourcetree</category> <category>Study</category> <category>Git</category> </item> <item><title>[Git] Git (1)</title><description>&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt; &lt;p&gt;들어가기전에 버전관리가 무엇인지 알아보자.&lt;/p&gt; &lt;p&gt;RPG 게임을 예를 들면, 한 캐릭터로 게임을 진행하다가 게임을 종료하기 전에 지금까지 진행한 게임데이터를 저장을 한다. 그리고 나중에 저장한 데이터를 불러와서 이어서 게임을 할수가 있다.&lt;/p&gt; &lt;p&gt;혹은 파일을 편집하다가 ctrl+z 등으로 수정했던 전 단계로 돌아갈 수 있다.&lt;/p&gt; &lt;p&gt;이렇게 자신이 원하는 시점 혹은 버전으로 이동할 수 있게 해주는 것이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;버전관리&lt;/code&gt;이고, 이를 도와주는 툴을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;버전관리시스템&lt;/code&gt; 이라고 한다. ( 형상관리, 형상관리시스템, 형상관리 툴 )&lt;/p&gt; &lt;p&gt;보통 혼자 프로젝트를 진행하면 버전관리가 나름 용이하겠지만, 여러명이 함께 한 프로젝트를 진행한다면, &lt;br /&gt; 여러명이 동시에 같은 버전으로 커밋을 하거나, &lt;br /&gt; 프로젝트 인원 수 혹은 프로젝트 기간이 연장되는 경우도 있을 것이다.&lt;br /&gt; 이렇게 된다면 최종버전이 무엇인지도 헷갈리게 되고, 결론적으로 버전을 관리하는게 까다로울 것이다.&lt;/p&gt; &lt;p&gt;이 때 관리를 용이하게 해주기 위해 사용하는 것이 버전관리이며, 버전관리시스템이다.&lt;/p&gt; &lt;p&gt;버전관리 툴은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitHub&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GitLab&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BitBucket&lt;/code&gt; 등이 있다.&lt;/p&gt; &lt;h2 id=&quot;-기본적인-용어&quot;&gt;💡 기본적인 용어&lt;/h2&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 4 5 6 7 8 9 10 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;1. 워킹트리 (working tree) ⇒ - 커밋을 체크아웃하면 생성되는 파일과 디렉토리. (작업폴더에서 [.git]폴더 (로컬저장소) 를 제외한 나머지 부분. - 사용자가 파일과 하위 폴더를 만들고 작업 결과물을 저장하는 곳 2. 로컬저장소 (local repository) ⇒ - Git init 명령으로 생성되는 [.git] 폴더가 로컬저장소이다. 3. 원격저장소 (remote repository) ⇒ - 로컬저장소를 업로드하는 곳. (GitHub, BitBucket 등) 4. Git 저장소 ⇒ - 일반적으로 Git 명령으로 관리할 수 있는 폴더 전체를 뜻한다. &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;계정정보인증&quot;&gt;계정정보인증&lt;/h2&gt; &lt;h4 id=&quot;git-계정정보인증관련-명령어이다&quot;&gt;Git 계정정보인증관련 명령어이다.&lt;/h4&gt; &lt;p&gt;주로 &lt;br /&gt;&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Github에서 비밀번호를 변경했는데, local git에 저장된 인증정보를 수정하지 않은 경우.&lt;/li&gt; &lt;li&gt;local git에 인증정보를 저장할 때, 정보를 잘못입력했을 경우&lt;br /&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;등의 원인으로 발생하는 오류를 해결할 때 도움이 되었어서 추가정리를 해봤다. 😊&lt;/p&gt; &lt;h3 id=&quot;-인증관련-명령어&quot;&gt;💡 인증관련 명령어&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --local credential.helper&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global credential.helper&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --system credential.helper&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config credential.helper &quot;cache --timeout=30&quot;&lt;/code&gt; &lt;ul&gt; &lt;li&gt;30초간 아이디 및 패스워드 설정.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config credential.helper store&lt;/code&gt; &lt;ul&gt; &lt;li&gt;인증 방식 store로 변경.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --unset credential.helper&lt;/code&gt; &lt;ul&gt; &lt;li&gt;옵션 삭제.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file ~/.git-credentials&lt;/code&gt; &lt;ul&gt; &lt;li&gt;인증파일 정보 확인.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm ~/.git-credentials&lt;/code&gt; &lt;ul&gt; &lt;li&gt;인증파일 삭제.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;-옵션설정관련-명령어&quot;&gt;💡 옵션설정관련 명령어&lt;/h3&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;코드의 { }, [ ] 등과 같은 괄호들은 구분이 용이하도록 작성한 것 이므로, 괄호는 제거하고 입력해야한다. &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global {옵션명}&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 전역 옵션의 내용을 보여줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global {옵션명} {새로운 값}&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 전역 옵션의 값을 새로 설정해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --global --unset {옵션명}&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 전역 옵션을 삭제해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --local {옵션명}&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 지역 옵션의 내용을 보여줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --local {옵션명} {새로운 값}&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 지역 옵션의 값을 새로 설정해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --local --unset {옵션명}&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 지역 옵션의 값을 삭제해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --system {옵션명}&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 시스템 옵션의 내용들을 보여줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --system {옵션명} {값}&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 시스템 옵션의 값을 새로 설정해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --system --unset {옵션명} {값}&lt;/code&gt; &lt;ul&gt; &lt;li&gt;지정한 시스템 옵션의 값을 삭제해줘 !&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git config --list&lt;/code&gt; &lt;br /&gt;&lt;br /&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;위에서 local, global, system은 범위를 의미한다. &lt;br /&gt; (우선순위 = local &amp;gt; global &amp;gt; system)&lt;/p&gt; &lt;ul&gt; &lt;li&gt;local : 특정 저장소.&lt;/li&gt; &lt;li&gt;global : 특정 사용자.&lt;/li&gt; &lt;li&gt;system : 시스템의 모든 사용자와 저장소&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;보통 local과 global을 사용해도 충분하지만, &lt;br /&gt; 자신의 원인을 파악한 후에, 적용 범위를 잘 선택해서 진행하면 될 것이다.&lt;/p&gt; </description><pubDate>Wed, 23 Feb 2022 18:15:21 +0900</pubDate><link>http://localhost:4000/posts/git-git-basic/</link><guid isPermaLink="true">http://localhost:4000/posts/git-git-basic/</guid> <category>git</category> <category>sourcetree</category> <category>Study</category> <category>Git</category> </item> <item><title>[Ho] 첫번째 포스팅 🎉</title><description>&lt;h2 id=&quot;나의-첫번째-블로그-&quot;&gt;나의 첫번째 블로그 🎊🎊&lt;/h2&gt; &lt;p&gt;&lt;br /&gt; 비전공자로 프로그래밍을 배운지 벌써 1년 반. &lt;br /&gt; 운 좋게 입사한지는 1년이 거의 다 되어간다. 🙌&lt;br /&gt; 별도의 교육과정과 입사 후 지금까지 배웠던 것들 중에 &lt;br /&gt; 현재 자주 사용하는 것 말고는 기억이 가물가물해졌다.&lt;/p&gt; &lt;p&gt;개인적으로 공부하거나 일을 하면서 맞닥뜨렸던 오류들도 시간이 지나서 다시 겪을 때면,&lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;어디서 많이 봤는데, 기억이 안나! 😂😂&quot;&lt;/code&gt; 등을 반복하기 싫기도 했고, 남들과 비슷하게, &lt;br /&gt; 그냥 나 혼자 공부하는 겸 정리해놓고 싶었다.&lt;/p&gt; &lt;p&gt;앞으로 틈날 때마다 블로그를 꾸며보기도 하고, &lt;br /&gt; 공부를 통해, 그리고 일을 하면서 알게되는 내용들을 조금씩 채워나갈 생각이다. 🎈&lt;/p&gt; </description><pubDate>Wed, 23 Feb 2022 15:12:37 +0900</pubDate><link>http://localhost:4000/posts/ho-firstPost/</link><guid isPermaLink="true">http://localhost:4000/posts/ho-firstPost/</guid> <category>my</category> <category>blah-blah</category> <category>Ho</category> <category>blah-blah</category> </item> </channel> </rss>
